name: Release Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  semantic-release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
      - name: Install dependencies
        run: npm ci
      - name: Install test dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update && sudo apt-get install -y luarocks lua5.3 lua5.3-dev
          luarocks install busted --local
          echo "$HOME/.luarocks/bin" >> $GITHUB_PATH
      - name: Run tests
        run: node cmdsage.js test
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  build-and-publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: semantic-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
      - name: Install dependencies
        run: npm ci
      - name: Install test dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update && sudo apt-get install -y luarocks lua5.3 lua5.3-dev
          luarocks install busted --local
          echo "$HOME/.luarocks/bin" >> $GITHUB_PATH
      - name: Run tests
        run: node cmdsage.js test
      - name: Extract Version from Tag
        id: extract_version
        run: |
          # Remove the leading "v" (e.g. "v1.2.3" â†’ "1.2.3")
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "addon_version=$VERSION" >> $GITHUB_OUTPUT
      - name: Update TOC Version
        run: |
          echo "Detected version: ${{ steps.extract_version.outputs.addon_version }}"
          sed -i "s/## Version: .*/## Version: ${{ steps.extract_version.outputs.addon_version }}/" CommandSage.toc
      - name: Build Addon
        run: node cmdsage.js build
      - name: Package Addon
        run: |
          mkdir -p dist
          zip -r dist/CommandSage-${{ steps.extract_version.outputs.addon_version }}.zip . \
            -x "*.git*" -x ".github*" -x "scripts/*" -x "dist/*" -x "tests/*"
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: CommandSage-Zip
          path: dist/CommandSage-${{ steps.extract_version.outputs.addon_version }}.zip
      - name: Publish to CurseForge
        env:
          CURSEFORGE_PROJECT_ID: ${{ secrets.CURSEFORGE_PROJECT_ID }}
          CURSEFORGE_TOKEN: ${{ secrets.CURSEFORGE_TOKEN }}
        run: |
          echo "Publishing to CurseForge..."
          # Read CHANGELOG.md (assumed to be at repository root)
          CHANGELOG=$(cat CHANGELOG.md)
          # Construct metadata JSON using jq (assumes jq is available)
          metadata=$(jq -n --arg rt "release" \
                        --arg cl "$CHANGELOG" \
                        --arg ctype "markdown" \
                        --arg dn "CommandSage-${{ steps.extract_version.outputs.addon_version }}" \
                        --arg gv "1.13.2" \
                        '{releaseType: $rt, changelog: $cl, changelogType: $ctype, displayName: $dn, gameVersions: [$gv]}')
          echo "Metadata: $metadata"
          curl -v -X POST "https://api.curseforge.com/v1/projects/${CURSEFORGE_PROJECT_ID}/upload-file" \
            -H "x-api-token: ${CURSEFORGE_TOKEN}" \
            -F "metadata=${metadata}" \
            -F "file=@dist/CommandSage-${{ steps.extract_version.outputs.addon_version }}.zip"
