name: Build and Publish CommandSage

on:
  push:
    branches:
      - main

jobs:
  build-and-upload:
    # Matrix to test on both Linux and Windows for cross-platform verification
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y zip lua5.1 luarocks
          luarocks install busted

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install zip
          choco install lua
          REM If Luarocks is not installed by default:
          luarocks install busted

      - name: Run Tests
        run: |
          cd tests
          busted --verbose --lpath="?;?.lua;?/init.lua"

      - name: Extract Addon Version
        id: extract_version
        run: |
          VERSION_LINE=$(grep -m1 -oP '(?<=Version-).*(?=-blue)' README.md || echo "4.3")
          echo "addon_version=$VERSION_LINE" >> $GITHUB_OUTPUT

      - name: Update TOC Version
        run: |
          echo "Detected version: ${{ steps.extract_version.outputs.addon_version }}"
          sed -i "s/## Version: .*/## Version: ${{ steps.extract_version.outputs.addon_version }}/" CommandSage.toc

      - name: Build
        run: |
          if [ -f scripts/build.sh ]; then
            chmod +x scripts/build.sh
            ./scripts/build.sh
          else
            echo "scripts/build.sh not found; skipping."
          fi

      - name: Package Addon
        run: |
          mkdir -p dist
          zip -r dist/CommandSage-${{ steps.extract_version.outputs.addon_version }}.zip . \
            -x ".git*" \
            -x ".github*" \
            -x "scripts/*" \
            -x "dist/*" \
            -x "tests/*"

      - name: Upload artifact to GitHub
        uses: actions/upload-artifact@v2
        with:
          name: CommandSage-Zip
          path: ./dist/*.zip

      - name: Publish to CurseForge (Example)
        if: false  # Replace 'false' with conditions for your actual release
        run: |
          echo "Would publish to CurseForge using token: ${{ secrets.CURSEFORGE_TOKEN }}"

      - name: Publish to SourceForge (Example)
        if: false
        run: |
          echo "Would upload to SourceForge with credentials."
